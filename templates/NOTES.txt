1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "helm-templates.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "helm-templates.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "helm-templates.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "helm-templates.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

{{- if .Values.doppler.enabled }}
2. Doppler Integration:
   - Secrets are managed via External Secrets Operator
   - Check secret status: kubectl get externalsecret -n {{ .Release.Namespace }}
   - View secrets: kubectl get secret {{ include "helm-templates.fullname" . }}-doppler -n {{ .Release.Namespace }} -o yaml
{{- end }}

{{- if .Values.autoscaling.enabled }}
3. Autoscaling:
   - HPA is enabled with min: {{ .Values.autoscaling.minReplicas }}, max: {{ .Values.autoscaling.maxReplicas }}
   - Check HPA status: kubectl get hpa -n {{ .Release.Namespace }}
{{- end }}

{{- if .Values.cronjob.enabled }}
4. CronJob:
   - Schedule: {{ .Values.cronjob.schedule }}
   - Check cronjob status: kubectl get cronjob -n {{ .Release.Namespace }}
   - View job logs: kubectl logs job/{{ include "helm-templates.fullname" . }} -n {{ .Release.Namespace }}
{{- end }}

{{- if .Values.job.enabled }}
5. Job:
   - One-time job is enabled
   - Check job status: kubectl get job -n {{ .Release.Namespace }}
   - View job logs: kubectl logs job/{{ include "helm-templates.fullname" . }} -n {{ .Release.Namespace }}
{{- end }}

{{- if .Values.configmap.enabled }}
6. ConfigMap:
   - Configuration data is available
   - View configmap: kubectl get configmap {{ include "helm-templates.fullname" . }} -n {{ .Release.Namespace }} -o yaml
{{- end }}

7. Useful Commands:
   - Check deployment status: kubectl get deployment -n {{ .Release.Namespace }}
   - View application logs: kubectl logs deployment/{{ include "helm-templates.fullname" . }} -n {{ .Release.Namespace }}
   - Check service endpoints: kubectl get endpoints -n {{ .Release.Namespace }}
   - Monitor resource usage: kubectl top pods -n {{ .Release.Namespace }}

8. Cost Optimization Tips:
   - Resource limits are set to minimize costs
   - Use spot instances for additional savings
   - Monitor usage with: kubectl top nodes && kubectl top pods --all-namespaces 
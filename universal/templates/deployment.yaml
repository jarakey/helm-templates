{{- $root := . }}
{{- $deployments := list }}
{{- if .Values.deployment | kindIs "map" }}
  {{- $deployments = append $deployments .Values.deployment }}
{{- else if .Values.deployment | kindIs "slice" }}
  {{- $deployments = .Values.deployment }}
{{- else if .Values.deployments | kindIs "slice" }}
  {{- $deployments = .Values.deployments }}
{{- end }}
{{- range $deployments }}
{{- if .enabled }}
{{- $deployName := .name }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name | required "A deployment must have a name" }}
  labels:
    {{- include "common.labels" $root | nindent 4 }}
    {{- range $key, $val := .labels }}
    {{ $key }}: {{ $val | quote }}
    {{- end }}
  {{- if .annotations }}
  annotations:
    {{- range $key, $value := . }}
    {{ $key | quote }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
spec:
  replicas: {{ .replicas | default 1 }}
  {{- with .strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "selector.labels" $root | nindent 6 }}
      app.kubernetes.io/component: {{ .name }}
  template:
    metadata:
      labels:
        {{- include "selector.labels" $root | nindent 8 }}
        app.kubernetes.io/component: {{ .name }}
        {{- range $key, $value := .podLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- if .podAnnotations }}
      annotations:
        {{- range $key, $value := . }}
        {{ $key | quote }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
      {{- if $root.Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $root.Values.global.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- if .serviceAccountName }}
      serviceAccountName: {{ .serviceAccountName }}
      {{- else if $root.Values.security.serviceAccount.create }}
      serviceAccountName: {{ include "common.serviceAccountName" $root }}
      {{- end }}
      {{- with .initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .name }}
          {{- if .image }}
          image: "{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: {{ .image.pullPolicy | default "IfNotPresent" }}
          {{- else if $root.Values.global.image }}
          image: "{{ $root.Values.global.image.repository }}:{{ $root.Values.global.image.tag }}"
          imagePullPolicy: {{ $root.Values.global.image.pullPolicy | default "IfNotPresent" }}
          {{- end }}
          {{- with .command }}
          command:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .args }}
          args:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .envFrom }}
          envFrom:
            {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- with .resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .ports }}
          ports:
            {{- range . }}
            - containerPort: {{ .containerPort }}
              protocol: {{ .protocol | default "TCP" }}
            {{- end }}
          {{- end }}
          {{- end }}
          {{- if .healthCheck }}
          {{- if .healthCheck.enabled | default false }}
          livenessProbe:
            httpGet:
              path: {{ .healthCheck.path }}
              port: {{ .healthCheck.port | default (index .ports 0).containerPort }}
            initialDelaySeconds: {{ .healthCheck.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .healthCheck.periodSeconds | default 10 }}
          readinessProbe:
            httpGet:
              path: {{ .healthCheck.path }}
              port: {{ .healthCheck.port | default (index .ports 0).containerPort }}
            initialDelaySeconds: {{ .healthCheck.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .healthCheck.periodSeconds | default 10 }}
          {{- end }}
      {{- with .volumes }}
      volumes:
        {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .podSecurityContext }}
      podSecurityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .terminationGracePeriodSeconds }}
      {{- end }}
  progressDeadlineSeconds: 300
  revisionHistoryLimit: 0
---
{{- if and .service .service.enabled .service.ports }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .name }}
  labels:
    {{- include "common.labels" $root | nindent 4 }}
spec:
  type: {{ .service.type | default "ClusterIP" }}
  selector:
    {{- include "selector.labels" $root | nindent 4 }}
    app.kubernetes.io/component: {{ .name }}
  ports:
    {{- range .service.ports }}
    - name: {{ .name }}
      port: {{ .port }}
      targetPort: {{ .targetPort | default .port }}
      protocol: {{ .protocol | default "TCP" }}
    {{- end }}
  {{- with .service.sessionAffinity }}
  sessionAffinity: {{ . }}
  {{- end }}
---
{{- end }}
{{- end }}
{{- end }}
